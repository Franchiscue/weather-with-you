{"version":3,"sources":["webpack://app-tiempo-y-localizacion/./src/js/http-provider-geolocation.js","webpack://app-tiempo-y-localizacion/./src/js/http-provider-weather.js","webpack://app-tiempo-y-localizacion/./src/js/unixTimeConverter.js","webpack://app-tiempo-y-localizacion/./src/js/degreeToDirection.js","webpack://app-tiempo-y-localizacion/./src/index.js"],"names":[],"mappings":";;;;;AAAA;AACO;;AAEP;AACA,kGAAkG,KAAK,SAAS,SAAS;AACzH;;AAEO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,C;;AChBA;AACA,wGAAwG,KAAK,OAAO,KAAK,sBAAsB,KAAK;AACpJ,MAAM,yBAAG;;AAEF;AACP;AACA,iEAAiE,yBAAG;AACpE;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,C;;ACbO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,IAAI;AACtC,kCAAkC,IAAI;AACtC,kBAAkB,KAAK,GAAG,MAAM,GAAG,KAAK,MAAM,KAAK,GAAG,SAAS,GAAG,SAAS;AAC3E;AACA,C;;ACbO;AACP;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA,C;;ACnBA;AACwB;;AAExB;AACA;AACA;AACA;;AAEA;;AAEwD;AACJ;AACF;;AAElD;AACA,gB;AACA,6BAA6B;AAC7B;AACA;;AAEA;;AAEA;AACA;AACA,IAAI,MAAM;AACV;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA,QAAQ,kBAAkB,IAAI,2BAA2B;AACzD;AACA,KAAK;AACL;AACA;AACA,CAAC;;AAED;AACA,IAAI,UAAU;AACd;AACA;AACA;AACA;AACA,qBAAqB,UAAU,QAAQ;AACvC,qBAAqB,qFAAqF,KAAK,QAAQ,KAAK;AAC5H;AACA;AACA,mFAAmF,QAAQ,cAAc;AACzG;AACA;AACA,+EAA+E,cAAc;AAC7F;AACA;AACA;AACA;AACA,+EAA+E,UAAU;AACzF;AACA;AACA,6EAA6E,YAAY;AACzF;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,iBAAiB,UAAU,QAAQ;AACnC,iBAAiB,qFAAqF;AACtG;AACA;AACA,2EAA2E,YAAY,KAAK;AAC5F;AACA;AACA,0EAA0E,YAAY,KAAK;AAC3F;AACA;AACA;AACA;AACA,+EAA+E,QAAQ,cAAc;AACrG;AACA;AACA,2EAA2E,cAAc;AACzF;AACA;AACA;AACA;AACA,2EAA2E,UAAU;AACrF;AACA;AACA,yEAAyE,YAAY;AACrF;AACA;AACA;AACA,SAAS;AACT,KAAK;AACL;AACA,CAAC,E","file":"9447c6470efeb2e23203.bundle.js","sourcesContent":["//HTML\r\nexport const addressInput = document.getElementById(\"_address\");\r\n\r\n//API\r\nconst httpProviderGeo = (_key, _address) => `http://api.positionstack.com/v1/forward?access_key=${_key}&query=${_address}`;\r\nconst key = \"e46e9538d21fabc02428d984b22e001d\";\r\n\r\nexport const geoAPI = async() =>{\r\n    try {\r\n        const resp = await fetch(httpProviderGeo(key, addressInput.value));\r\n        if(!resp.ok) throw \"Conection error\";\r\n        const data = await resp.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","//API\r\nconst httpProviderWeather = (_lat, _lon, _key) => `http://api.openweathermap.org/data/2.5/onecall?lat=${_lat}&lon=${_lon}&units=metric&appid=${_key}`;\r\nconst key = \"5e757d555cc3e81f63679d94dd05e5f6\";\r\n\r\nexport const weatherAPI = async(_lat, _lon) => {\r\n    try {\r\n        const resp = await fetch(httpProviderWeather(_lat, _lon, key));\r\n        if (!resp.ok) throw \"Conection Error\";\r\n        const data = await resp.json();\r\n        return data;\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n}","export const unixToTime = (_time) =>{\r\n    let a = new Date(_time*1000);\r\n    let date = a.getDate();\r\n    let months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'];\r\n    let month = months[a.getMonth()];\r\n    let year = a.getFullYear();\r\n    let hour = a.getHours();\r\n    let min = a.getMinutes();\r\n    let sec = a.getSeconds();\r\n    let parseMin = (min<10) ? `0${min}` : min;\r\n    let parseSec = (sec<10) ? `0${sec}` : sec;\r\n    let time = `${date}/${month}/${year} at ${hour}:${parseMin}:${parseSec}`;\r\n    return time;\r\n}","export const degToDir = (_degree) => {\r\n    _degree = parseFloat(_degree);\r\n    if(_degree < 337.5 && _degree > 292.5){\r\n        return \"South-East\";\r\n    } else if (_degree < 292.5 && _degree > 265){\r\n        return \"South\";\r\n    } else if(_degree < 265 && _degree > 247.5){\r\n        return \"South-West\";\r\n    } else if(_degree < 247.5 && _degree > 202.5){\r\n        return \"West\";\r\n    } else if(_degree < 202.5 && _degree > 112.5){\r\n        return \"North-West\";\r\n    } else if(_degree < 112.5 && _degree > 67.5){\r\n        return \"North\";\r\n    }else if(_degree < 67.5 && _degree > 22.5){\r\n        return \"North-East\"\r\n    } else {\r\n        return \"East\";\r\n    }\r\n}","//Importar el CSS\r\nimport \"./css/style.css\"\r\n\r\n//HTML\r\nconst searchBtn = document.getElementById(\"_search\");\r\nconst hourlyDiv = document.getElementById(\"_hourly\");\r\nconst dailyDiv = document.getElementById(\"_daily\");\r\n\r\n//Importar funciones y variables que necesitamos para que funcione la aplicación\r\nimport { geoAPI, addressInput} from \"./js/http-provider-geolocation\"; \r\nimport { weatherAPI } from \"./js/http-provider-weather\";\r\nimport { unixToTime } from \"./js/unixTimeConverter\";\r\nimport { degToDir } from \"./js/degreeToDirection\";\r\n\r\n//Variables\r\nlet typingTimer;               \r\nlet doneTypingInterval = 500;  //time in ms\r\nlet latitude = 0;\r\nlet longitude = 0;\r\n\r\n//Llamadas\r\n\r\n//Funciones\r\nconst doneTyping = () => {\r\n    geoAPI().then(resp => {\r\n        console.log(resp.data[0]);\r\n        latitude = resp.data[0].latitude;\r\n        longitude = resp.data[0].longitude;\r\n        searchBtn.removeAttribute(\"hidden\");\r\n    })\r\n    .catch(error => console.log(error));\r\n}\r\n\r\n//Eventos\r\n//Al dejar de teclear, empieza la cuenta atrás para llamar a la función\r\naddressInput.addEventListener('keyup', () => {\r\n    searchBtn.setAttribute(\"hidden\", true);\r\n    clearTimeout(typingTimer);\r\n    if (addressInput.value && addressInput.value.includes(\",\")) {\r\n        typingTimer = setTimeout(doneTyping, doneTypingInterval);\r\n    } else {\r\n        searchBtn.setAttribute(\"hidden\", true);\r\n    }\r\n});\r\n\r\nsearchBtn.addEventListener(\"click\", () => {\r\n    weatherAPI(latitude, longitude).then(resp =>{\r\n        hourlyDiv.innerHTML = `<p class=\"font-weight-bold mt-2\">Hourly</p>`;\r\n        dailyDiv.innerHTML = `<p class=\"font-weight-bold mt-2\">Daily</p>`;\r\n        resp.hourly.forEach(el =>{\r\n            hourlyDiv.innerHTML += `<div class = \"border back-white my-1\">\r\n                <p>${unixToTime(el.dt)}</p>\r\n                <p>${el.weather[0].description.charAt(0).toUpperCase()+el.weather[0].description.slice(1)} - ${el.temp}&deg;</p>\r\n                <div class=\"row\">\r\n                    <div class=\"col\">\r\n                        <p><span class=\"font-weight-bold\">Wind direction</span>: ${degToDir(el.wind_deg)}</p>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        <p><span class=\"font-weight-bold\">Wind speed</span>: ${el.wind_speed}m/s</p>\r\n                    </div>\r\n                </div>\r\n                <div class=\"row\">\r\n                    <div class=\"col\">\r\n                        <p><span class=\"font-weight-bold\">Cloudiness</span>: ${el.clouds}% </p>\r\n                    </div>\r\n                    <div class=\"col\">\r\n                        <p><span class=\"font-weight-bold\">Humidity</span>: ${el.humidity}%</p>\r\n                    </div>\r\n                </div>\r\n            </div>`\r\n        });\r\n        resp.daily.forEach(el => {\r\n            dailyDiv.innerHTML += `<div class = \"border back-light my-1\">\r\n            <p>${unixToTime(el.dt)}</p>\r\n            <p>${el.weather[0].description.charAt(0).toUpperCase()+el.weather[0].description.slice(1)}</p>\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n                    <p><span class=\"font-weight-bold\">Min. Temp </span>: ${el.temp.min}&deg;</p>\r\n                </div>\r\n                <div class=\"col\">\r\n                    <p><span class=\"font-weight-bold\">Max. Temp</span>: ${el.temp.max}&deg;</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n                    <p><span class=\"font-weight-bold\">Wind direction</span>: ${degToDir(el.wind_deg)}</p>\r\n                </div>\r\n                <div class=\"col\">\r\n                    <p><span class=\"font-weight-bold\">Wind speed</span>: ${el.wind_speed}m/s</p>\r\n                </div>\r\n            </div>\r\n            <div class=\"row\">\r\n                <div class=\"col\">\r\n                    <p><span class=\"font-weight-bold\">Cloudiness</span>: ${el.clouds}% </p>\r\n                </div>\r\n                <div class=\"col\">\r\n                    <p><span class=\"font-weight-bold\">Humidity</span>: ${el.humidity}%</p>\r\n                </div>\r\n            </div>\r\n        </div>`\r\n        })\r\n    })\r\n    .catch(error => console.log(error));\r\n});"],"sourceRoot":""}